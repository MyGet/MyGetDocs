@using System.Globalization

@{
    Page.Title = "MyGet Documentation | Search";

    Response.OutputCache(600, varyByParams: new [] {"*"}); // cache 10 minutes

    const int resultsPerPage = 10;
    const string searchUrlTemplate = "https://www.googleapis.com/customsearch/v1?key={0}&cx={1}&alt=json&q={2}&num={3}&start={4}";
    const string appId = "AIzaSyBlo_Vd-5G71O5KAlJHRXj_9_HZWL8wn7Y";
    const string searchEngineId = "007192657988254065162:rqdc03j0uom";

    string query = Request.QueryString["q"];
    if (query.IsEmpty())
    {
        return;
    }

    query = query.Trim();
    if (query.IsEmpty())
    {
        return;
    }

    PageData["query"] = query;

    // result offset
    string page = Request.QueryString["p"];
    int pageValue;
    if (Int32.TryParse(page, out pageValue))
    {
        pageValue = Math.Max(0, pageValue);
    }
    else
    {
        pageValue = 0;
    }

    var searchUrl = String.Format(
        CultureInfo.InvariantCulture,
        searchUrlTemplate,
        HttpUtility.UrlEncode(appId),
        HttpUtility.UrlEncode(searchEngineId),
        HttpUtility.UrlEncode(query),
        resultsPerPage,
        (pageValue * 10 + 1).ToString());

    dynamic jsonResult = null;
    using (var client = new WebClient())
    {
        var content = client.DownloadString(searchUrl);
        jsonResult = Json.Decode(content);
    }

    if (jsonResult == null || jsonResult.searchInformation == null || jsonResult.queries == null || jsonResult.queries.request == null || jsonResult.items == null)
    {
        return;
    }

    string linkTemplate = "Search.cshtml?q=" + query + "&p=";
}

<article>
    @if (int.Parse(jsonResult.searchInformation.totalResults) == 0)
    {
        <h2 id="top">There is no result for '@query'.</h2>
    }
    else
    {
        var request = jsonResult.queries.request[0];

        int totalResults = int.Parse(request.totalResults);
        int startResult = request.startIndex;
        int endResult = startResult + request.count - 1;

        <h2>Search results for '@query'.</h2>
        <h3>@startResult-@endResult of about @totalResults results.</h3>
        <section class="results">
            @foreach (var result in jsonResult.items)
            {
                <section class="result">
                    <h4><a href="@result.link.Replace("https://", "http://")">@Html.Raw(result.htmlTitle)</a></h4>
                    <p>@Html.Raw(result.htmlSnippet)</p>
                    <aside>@result.displayLink.Replace("https://", "http://")</aside>
                </section>
            }
            @if (totalResults > resultsPerPage)
            {
                <footer>
                    <hr />
                    @PaginationHelper.RenderPagination(pageValue, totalResults, resultsPerPage, linkTemplate)
                </footer>
            }
        </section>
    }
</article>